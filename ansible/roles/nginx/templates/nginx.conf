# Resources and server options
# ----------------------------

user www-data www-data;
pid /var/run/nginx.pid;

worker_processes 1;  # 1 per core.

events {
	worker_connections 1024;

	# Accept as many connections as possible, after nginx
	# gets notification about a new connection.
	# May flood worker_connections, if that option is set too low.
	multi_accept on;

	use epoll;
}

# Override OS' limit values
worker_rlimit_nofile 10000;

http {


# Logging
# -------

	error_log '/var/log/nginx/error.log' error;

	log_format main '$remote_addr - $remote_user ($time_local) $status "$request" $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';

	# Send the nginx version number in error pages and server headers.
	server_tokens off;
	access_log '/var/log/nginx/access.log' main buffer=16k;


# Access control
# --------------

	allow   all;



# Compression
# -----------

	gzip              on;
	gzip_http_version 1.0;
	gzip_comp_level   6;
	gzip_min_length   1100;
	gzip_proxied      expired no-cache no-store private auth;
	gzip_vary         on;
	gzip_types        text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript application/json;
	gzip_disable      MSIE [1-6]\.;


# MIME
# ----

	include       /etc/nginx/mime.types;
	default_type  application/octet-stream;


# SSL
# ---

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:EECDH+RC4:RSA+RC4:!MD5;
	ssl_prefer_server_ciphers on;
	ssl_session_cache shared:SSL:10m;
	ssl_session_timeout 10m;


# Resources and server options
# ----------------------------

	# Caches information about open FDs, freqently accessed files.
	open_file_cache          max=200000 inactive=20s;
	open_file_cache_valid    30s;
	open_file_cache_min_uses 2;
	open_file_cache_errors   on;

	# Sendfile copies data between one FD and other
	# from within the kernel. More efficient than read() + write(),
	# since the requires transferring data to and from the user space.
	sendfile on;

	# Causes nginx to attempt to send its HTTP response head
	# in one packet, instead of using partial frames.
	# This is useful for prepending headers before calling
	# sendfile, or for throughput optimization.
	tcp_nopush on;

	# Don't buffer data-sends (disable Nagle algorithm).
	# Good for sending frequent small bursts of data in real time.
	tcp_nodelay on;

	# Timeout for keep-alive connections.
	# Server will close connections after this time.
	keepalive_timeout 30;

	# Number of requests a client can make over the keep-alive connection.
	keepalive_requests 100;

	# allow the server to close the connection after a client
	# stops responding. Frees up socket-associated memory.
	reset_timedout_connection on;

	# Send the client a "request timed out" if the body
	# is not loaded by this time.
	client_body_timeout 10;

	# Specifies the maximum accepted body size of a client request, as
	# indicated by the request header Content-Length.
	#
	# If the stated content length is greater than this size, then the
	# client receives the HTTP error code 413 ("Request Entity Too
	# Large"). It should be noted that web browsers do not usually
	# know how to properly display such an HTTP error.
	#
	# Set to 0 to disable.
	client_max_body_size 1m;

	# If the client stops reading data, free up the stale
	# client connection after this much time.
	send_timeout 2;

	server_names_hash_bucket_size 64;
	types_hash_max_size           2048;
	types_hash_bucket_size        64;


# Include custom directives and enabled sites
# -------------------------------------------

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
  }
